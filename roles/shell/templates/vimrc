filetype off                   " required!

" enable 256 colors
set t_Co=256

set rtp+=~/.fzf
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" =============================== "
" ======== Vundle Config ======== "

Plug 'vim-vdebug/vdebug'
Plug 'tpope/vim-surround'
Plug 'mhinz/vim-grepper'
Plug 'phpstan/vim-phpstan'
Plug 'mbbill/undotree'
Plug 'janko-m/vim-test'

Plug 'vim-scripts/BufOnly.vim'

"Plug 'roxma/nvim-completion-manager'

Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'
Plug 'phpactor/phpactor' ,  {'do': 'composer install', 'for': 'php'}
Plug 'phpactor/ncm2-phpactor'

Plug 'sjl/gundo.vim'
Plug 'mechatroner/rainbow_csv'

Plug 'junegunn/vader.vim'

" Preview images in ASCII
" Plug 'ashisha/image.vim'

" Aligning
Plug 'godlygeek/tabular'

" Color scheme
 Plug 'vim-scripts/twilight256.vim'

" Grep buffers
Plug 'vim-scripts/Buffer-grep'

" Ctrlp - quickly find files, tags and buffers using fuzzy search
Plug 'kien/ctrlp.vim'

" Twig syntax highlighting
Plug 'lumiliet/vim-twig'

Plug 'w0rp/ale'

" Nerdtree file browser
Plug 'scrooloose/nerdtree'

" Allows text replacement regardless of CaSe
Plug 'tpope/vim-abolish'

" GiT integration: Gblame, Gread (reset to git state), Gstatus
Plug 'tpope/vim-fugitive'

" Get GITHub activity
" Plug 'junegunn/vim-github-dashboard'

" PHP Documentation - hit K (shift-k) on any php function
Plug 'mudpile45/vim-phpdoc'

" Apply a command on every file in the quickfix list :Qdo %s/Foobar/Barfoo
Plug 'henrik/vim-qargs'

" Vdebug - PHP debugging
" Plug 'joonty/vdebug'

" Gist
" Plug 'mattn/webapi-vim'
" Plug 'mattn/gist-vim'

" Argument wrapping and unwrapping
Plug 'FooSoft/vim-argwrap'

Plug 'matze/vim-move'

"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'roxma/LanguageServer-php-neovim',  {'do': 'composer install && composer run-script parse-stubs'}
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

Plug 'editorconfig/editorconfig-vim'

call plug#end()

" =============================== "
" =========== Config ============ "

" Automatically detect filetypes
filetype plugin indent on

" Indentation
set autoindent
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

" Automatically write file for some commands, like cfile
set autowrite

" show lines numbers
set relativenumber
set number

" enable real-time searching
set incsearch

" highlight search matches
set hlsearch

" nerdtree
let NERDTreeCascadeOpenSingleChildDir=0
let NERDTreeCascadeSingleChildDir=0
let NERDTreeWinSize=50

" phpactor
let g:phpactorBranch = "develop"
let g:phpactorOmniError = v:true

" set syntax highlighting options.
syntax on
let c_space_errors = 1
let php_sql_query = 1
let php_sync_method = 0
let php_folding=0
let g:DisableAutoPHPFolding = 1

" Nerdtree: Close NERDTree if it is the last open buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" show TWIG highlighting
au BufRead,BufNewFile *.twig set syntax=twig

scriptencoding utf-8
set history=1000
set nospell
set pastetoggle=<F12>

" status lines -- note this is not used when airline is enabled
if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\ " Filename
    set statusline+=%w%h%m%r " Options
    " set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y] " filetype
    set statusline+=\ [%{getcwd()}] " current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif

" Ignore files
set wildignore+=*/.git/*,*.cache,*.cache.php,*.swp,*.swo,**/cache/**,*.min.js

" Allow hidden buffers
set hidden

" CtrlP
let g:ctrlp_follow_symlinks = 0
let g:ctrlp_max_files = 20000
let g:ctrlp_max_depth = 80
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_working_path_mode = ''
let g:ctrlp_map = ''

autocmd FileType rst setlocal textwidth=78
autocmd Filetype markdown setlocal textwidth=78
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php setlocal omnifunc=phpactor#Complete
autocmd FileType cucumber setlocal omnifunc=phpactor#Complete
"autocmd FileType php setlocal omnifunc=LanguageClient#complete
"autocmd FileType php setlocal omnifunc=lsp#complete


autocmd CompleteDone * pclose
set completeopt=noinsert,menuone,noselect

" Color scheme
color twilight256

" =============================== "
" ===== Keyboard Mappings ======= "
let g:move_key_modifier = 'C'
let mapleader=","

" Toggle NERDTree file browser
map <Leader>n :NERDTreeToggle <CR>

" Open current file in NERDTree
map <Leader>f :NERDTreeFind <CR>

" Tagbar shows list of all methods and variables in class
map <Leader>t :TagbarToggle <CR>

" Automatically add a use statement for class under cursor (uses ctags)
map <silent><Leader>d :call phpactor#OffsetTypeInfo()<CR>
map <silent><Leader>tt :call phpactor#Transform()<CR>
map <silent><Leader>cc :call phpactor#ClassNew()<CR>
map <silent><Leader>ci :call phpactor#ClassInflect()<CR>
map <silent><Leader>rr :call phpactor#ClassReferences()<CR>
map <silent><Leader>mm :call phpactor#ContextMenu()<CR>
map <silent><Leader>nn :call phpactor#Navigate()<CR>
map <silent><Leader>gg :call phpactor#Navigate()<CR>
map <silent><Leader>pfm :call phpactor#MoveFile()<CR>
map <silent><Leader>pfc :call phpactor#CopyFile()<CR>
map <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>
vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>
nmap <Leader>u :call phpactor#UseAdd()<CR>
nmap <Leader>e :call phpactor#ClassExpand()<CR>
nmap <Leader>o :call phpactor#GotoDefinition()<CR>
nmap <Leader>cv :call phpactor#ChangeVisibility()<CR>
nmap <silent><Leader>K :call phpactor#Hover()<CR>

nnoremap <silent><Leader>gd :call LanguageClient#textDocument_definition()<CR>
"nnoremap <silent><Leader>K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent><Leader>s :call LanguageClient#textDocument_documentSymbol()<CR>

nmap <Leader>v :Vader<CR>

" Fuzzy search open buffers
map <C-B> :CtrlPBuffer <CR>
" Fuzzy search tags
map <C-T> :CtrlPTag <CR>
" Fuzzy search all project filenames
map <C-P> :FZF <CR>

" Reload the .vimrc config
map <Leader>vr :so ~/.vimrc<CR>

" Edit .vimrc
map <Leader>ve :tabnew ~/.vimrc<CR>

" Next quick fix item
map <Leader>= :cnext<CR>
map <Leader>+ :cnf<CR>

" Previous quick fix item
map <Leader>- :cprev<CR>
map <Leader>) :cpf<CR>

" Remap C-w C-w to C-w C-o, like in tmux
nnoremap <C-w><C-o> <C-w><C-w>
nnoremap <C-w>o <C-w><C-w>
nnoremap <silent> <leader>aw :ArgWrap<CR>

func! AsciiMode()
    syntax off
    setlocal virtualedit=all
    setlocal cc=80
    autocmd BufWritePre * :%s/\s\+$//e
endfu
com! ASC call AsciiMode()

"let g:completor_php_omni_trigger = '(->\w{2,}|::\w*)'
"let g:completor_disable_filename = 1
"let g:completor_disable_buffer = 1
"let g:completor_disable_ultisnips = 1

" Nice colors for autocomplete
highlight Pmenu ctermbg=black ctermfg=white  gui=bold

"inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! Align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

"let g:LanguageClient_serverCommands = {
"    \ 'php': ['tcp://127.0.0.1:8888']
"    \}
"let g:LanguageClient_serverCommands = {
"    \ 'php': [ '/home/daniel/www/phpactor/phpactor/bin/phpactor', 'server:start', '--stdio', '--working-dir=' . getcwd()]
"    \}
"let g:LanguageClient_serverCommands = {
"    \ 'php': ['php', '/home/daniel/www/felixfbecker/php-language-server/bin/php-language-server.php']
"    \}

let g:LanguageClient_loggingLevel = 'DEBUG'
"let g:LanguageClient_loggingFile = 'lsp-client.log'
let g:LanguageClient_completionPreferTextEdit = 1

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" ale
let g:ale_linters = {'php': ['php', 'phpstan', 'phpmd']}
let g:ale_php_phpstan_executable = './vendor/bin/phpstan'
let g:ale_completion_enabled = 0
